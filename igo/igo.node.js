// Generated by CoffeeScript 1.12.0

/*

	dos posibles salidas
		tablero
			nuevo
			select
		jugar
	entradas:
		forget # no lo borro ni lo nuevo porque puede estar en uso # 
		tablero # puede que lo especif√≠que
			select
				nuevo
			nuevo
		jugar
			nuevo
			select
 */

(function() {
  var eje, igo, nuevo;

  nuevo = function(v) {
    var jeto;
    jeto = {
      "tablero": (function() {
        var i, ref, results;
        results = [];
        for (i = 1, ref = v.gross; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (j = 1, ref1 = v.gross; 1 <= ref1 ? j <= ref1 : j >= ref1; 1 <= ref1 ? j++ : j--) {
              results1.push("nada");
            }
            return results1;
          })());
        }
        return results;
      })(),
      "turno": "negra"
    };
    if (v.jugada != null) {
      if (v.jugada.piedra !== "nada") {
        jeto.tablero[v.jugada.y][v.jugada.x] = "negra";
        jeto.turno = "blanca";
      } else {
        jeto.tablero[v.jugada.y][v.jugada.x] = "nada";
      }
    }
    return v.colecta.findOneAndUpdate({
      "_id": v.gross
    }, {
      $set: jeto
    }, {
      returnOriginal: false,
      upsert: true
    }, function(err, prsnt) {
      if (err) {
        console.dir(err);
      }
      prsnt.value.type = "tablero";
      return v.ws.co(prsnt.value["_id"])({
        tablero: prsnt.value
      });
    });
  };

  igo = function(v) {
    if (v.type === "nuevo") {
      nuevo(v);
    }
    return v.colecta.find({
      "_id": v.gross
    }, {
      "id": 0
    }).toArray(function(err, prsnt) {
      var query;
      if (err) {
        return console.dir(err);
      } else {
        if (prsnt[0] != null) {
          if (v.jugada != null) {
            console.dir(v.jugada);
            query = {};
            if (v.jugada.piedra !== "nada") {
              query.turno = {
                blanca: "negra",
                negra: "blanca"
              }[v.jugada.piedra];
            }
            query["tablero." + v.jugada.y + "." + v.jugada.x] = v.jugada.piedra;
            return v.colecta.findOneAndUpdate({
              "_id": v.gross
            }, {
              "$set": query
            }, {
              returnOriginal: false
            }, function(err, prsnt) {
              if (err) {
                console.dir(err);
              }
              v.jugada.piedra = prsnt.value["tablero"][v.jugada.y][v.jugada.x];
              v.jugada.turno = prsnt.value["turno"];
              v.jugada.gross = prsnt.value["_id"];
              v.jugada.type = "jugar";
              v.ws.co(prsnt.value["_id"])({
                jugar: v.jugada
              });
              if (v.type !== "jugar") {
                prsnt.value.type = "tablero";
                return v.ws.re({
                  tablero: prsnt.value
                });
              }
            });
          } else {
            prsnt[0].type = "tablero";
            return v.ws.re({
              tablero: prsnt[0]
            });
          }
        } else {
          return nuevo(v);
        }
      }
    });
  };

  eje = {
    nuevo: nuevo,
    jugar: igo,
    select: igo
  };

  module.exports = {
    cocina: function(v) {
      var gross, jeto, results, type;
      results = [];
      for (gross in v.petita) {
        if (!(gross in v.mesas)) {
          v.mesas[gross] = {};
        }
        jeto = {
          colecta: v.colecta,
          ws: {
            co: function(mesa) {
              return function(mj) {
                return v.core(["igo", mesa])({
                  igo: mj
                });
              };
            },
            re: function(mj) {
              return v.core.te({
                igo: mj
              });
            }
          },
          gross: gross
        };
        results.push((v.petita[gross] != null ? ((function() {
          var results1;
          results1 = [];
          for (type in v.petita[gross]) {
            jeto.type = type;
            jeto.jugada = v.petita[gross][type];
            if (type === "forget") {
              delete v.mesas[gross];
              results1.push(function() {
                return console.log("forgotten");
              });
            } else {
              results1.push(igo);
            }

            /*
            						{
            							forget: ->
            								delete v.mesas[gross]
            								-> console.log "forgotten"
            							nuevo:->
            								eje.nuevo
            							jugar: ->
            								eje.jugar
            							select:-> eje.select
            						}[type]()
             */
          }
          return results1;
        })())[0] : igo)(jeto));
      }
      return results;
    }
  };


  /*
  
  			for mano of v.petita
  				if v.petita[mano].type is "forget"
  					 * comensales[come].mesas
  					v.mesas.splice(v.mesas.indexOf(v.petita[mano].gross),1)
  				else
  					unless v.petita[mano].gross in v.mesas
  						v.mesas.push(v.petita[mano].gross)
  					v.petita[mano].ws =
  						 * re: (mj)->
  						 * 	v.ws.re(igo:mj)
  						re: (m)->
  							v.ws.re(igo:m)
  						co: (mesa)->(mj)->
  							#v.ws.co(igo:mj)
  							v.ws.co(igo:mj,["igo",mesa])
  					v.petita[mano].colecta = v.colecta
  					eje[mano](v.petita[mano])
  				#console.dir v.mesas
  
  			 * igo = require("../igo/igo.node.js")
  			#for gross of mj
  			#console.dir mesas
  			#console.dir v.petita
   */


  /*
  	on:
  	re:
  	co:
   */

}).call(this);
